
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/components/ui/use-toast";
import { Navbar } from "@/components/layout/Navbar";
import { useParams, useNavigate } from "react-router-dom";
import { FileText, ArrowLeft } from "lucide-react";
import { useState, useEffect } from "react";
import { db, auth } from "@/components/auth/firebase-config";
import { doc, setDoc, getDoc, updateDoc } from "firebase/firestore";
import { CVData, CV } from "@/types/profile";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

const ResumeForm = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [jobDescription, setJobDescription] = useState("");
  const [cvNameDialogOpen, setCvNameDialogOpen] = useState(false);
  const [cvName, setCvName] = useState("");
  const [isEditing, setIsEditing] = useState(false);
  
  useEffect(() => {
    // Check if we're editing an existing CV
    const loadCvData = async () => {
      const user = auth.currentUser;
      if (!user) {
        toast({
          title: "Erreur d'authentification",
          description: "Vous devez être connecté pour accéder à vos CVs",
          variant: "destructive",
        });
        navigate("/login");
        return;
      }
      
      if (id && id !== "new") {
        setIsEditing(true);
        
        try {
          const userDocRef = doc(db, "users", user.uid);
          const userDoc = await getDoc(userDocRef);
          
          if (userDoc.exists()) {
            const userData = userDoc.data();
            const cvs = userData.cvs || [];
            const cv = cvs.find((cv: CV) => cv.cv_name === id);
            
            if (cv) {
              setJobDescription(cv.job_raw || "");
              setCvName(cv.cv_name || "");
            } else {
              toast({
                title: "CV introuvable",
                description: "Le CV demandé n'existe pas",
                variant: "destructive",
              });
              navigate("/resumes");
            }
          }
        } catch (error) {
          console.error("Error loading CV data:", error);
          toast({
            title: "Erreur",
            description: "Impossible de charger les données du CV",
            variant: "destructive",
          });
        }
      } else if (id === "new") {
        // For new CV, show the name dialog
        setCvNameDialogOpen(true);
      }
    };
    
    loadCvData();
  }, [id, navigate, toast]);

  const handleGenerateResume = async () => {
    if (!jobDescription.trim()) {
      toast({
        title: "Erreur",
        description: "Veuillez copier la fiche de poste avant de générer un CV",
        variant: "destructive",
      });
      return;
    }

    const user = auth.currentUser;
    if (!user) {
      toast({
        title: "Erreur d'authentification",
        description: "Vous devez être connecté pour générer un CV",
        variant: "destructive",
      });
      navigate("/login");
      return;
    }

    try {
      toast({
        title: "Génération du CV",
        description: "Votre CV est en cours de génération...",
      });
      
      // Get user document reference
      const userDocRef = doc(db, "users", user.uid);
      const userDoc = await getDoc(userDocRef);
      
      // Get user profile for CV generation if exists
      let profile = null;
      if (userDoc.exists()) {
        const userData = userDoc.data();
        profile = userData.profile;
      }
      
      // In a real implementation, here we would call an API or function to generate the CV data
      // For now we'll just create a placeholder CV
      
      // Create a new CV object
      const newCV: CV = {
        job_raw: jobDescription,
        cv_name: cvName,
        cv_data: {
          // This would normally be generated by an AI based on the job description and profile
          educations: [],
          lang_of_cv: "français",
          hobbies: profile?.hobbies || "",
          languages: [],
          phone: profile?.head?.phone || "",
          mail: profile?.head?.mail || "",
          title: profile?.head?.title || "",
          sections_name: {
            experience_section_name: "Expérience professionnelle",
            Hobbies_section: "Centres d'intérêt",
            languages_section_name: "Langues",
            skills_section_name: "Compétences",
            education_section_name: "Formation"
          },
          skills: [],
          experiences: [],
          name: profile?.head?.name || ""
        }
      };
      
      // Update the user document
      if (userDoc.exists()) {
        // Get existing CVs or initialize empty array
        const userData = userDoc.data();
        let cvs = userData.cvs || [];
        
        if (isEditing) {
          // Replace the existing CV
          cvs = cvs.map((cv: CV) => cv.cv_name === cvName ? newCV : cv);
        } else {
          // Add the new CV
          cvs.push(newCV);
        }
        
        // Update the document
        await updateDoc(userDocRef, { cvs });
      } else {
        // Create new user document with the CV
        await setDoc(userDocRef, {
          cvs: [newCV],
          profile: profile || {}
        });
      }
      
      toast({
        title: "Succès !",
        description: "Votre CV a été généré avec succès.",
      });
      
      navigate("/resumes");
    } catch (error) {
      console.error("Error generating CV:", error);
      toast({
        title: "Erreur",
        description: "Une erreur est survenue lors de la génération du CV",
        variant: "destructive",
      });
    }
  };
  
  const handleCreateNewCV = () => {
    if (!cvName.trim()) {
      toast({
        title: "Erreur",
        description: "Veuillez saisir un nom pour votre CV",
        variant: "destructive",
      });
      return;
    }
    
    setCvNameDialogOpen(false);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />
      <div className="py-12 px-4 sm:px-6 lg:px-8">
        <Button
          variant="ghost"
          onClick={() => navigate("/resumes")}
          className="mb-6 flex items-center gap-2"
        >
          <ArrowLeft className="w-4 h-4" />
          Retour aux CVs
        </Button>
        
        <Card className="w-full max-w-2xl mx-auto">
          <CardHeader>
            <CardTitle>
              {isEditing ? `Modifier le CV: ${cvName}` : "Nouveau CV"}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <form className="space-y-6">
              <div className="space-y-2">
                <label htmlFor="jobDescription" className="block text-sm font-medium text-gray-700">
                  Fiche de poste
                </label>
                <Textarea
                  id="jobDescription"
                  value={jobDescription}
                  onChange={(e) => setJobDescription(e.target.value)}
                  placeholder="Copiez-collez ici l'intégralité de la fiche de poste..."
                  className="min-h-[300px] w-full"
                />
                <p className="text-xs text-gray-500">
                  Copiez l'intégralité de la fiche de poste pour une meilleure qualité de génération.
                </p>
              </div>

              <Button
                type="button"
                onClick={handleGenerateResume}
                className="w-full"
              >
                <FileText className="w-4 h-4 mr-2" />
                Générer le CV
              </Button>
            </form>
          </CardContent>
        </Card>
      </div>
      
      {/* CV Name Dialog */}
      <Dialog open={cvNameDialogOpen} onOpenChange={setCvNameDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Nommez votre CV</DialogTitle>
          </DialogHeader>
          <div className="py-4">
            <Label htmlFor="cvName">Nom du CV</Label>
            <Input
              id="cvName"
              value={cvName}
              onChange={(e) => setCvName(e.target.value)}
              placeholder="Ex: Développeur React - Société X"
              autoFocus
            />
          </div>
          <DialogFooter>
            <Button onClick={handleCreateNewCV}>
              Créer
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default ResumeForm;
